[build-system]
requires = ["hatchling>=1.5"]
build-backend = "hatchling.build"

[project]
name = "jupyter-events"
description = "Jupyter Event System library"
readme = "README.md"
requires-python = ">=3.7"
authors = [
    { name = "Jupyter Development Team", email = "jupyter@googlegroups.com" },
]
keywords = [
    "Jupyter",
    "JupyterLab",
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
]
dependencies = [
    "jsonschema[format-nongpl,format_nongpl]>=3.2.0",
    "python-json-logger>=2.0.4",
    "pyyaml>=5.3",
    "traitlets>=5.3",
    # The following are necessary to address an issue where pyproject.toml normalizes extra dependencies
    # such that 'format_nongpl' is normalized to 'format-nongpl' which prevents these two validators from
    # from being installed when jsonschema is <= 4.9 because jsonschema uses 'format_nongpl' in those releases.
    "rfc3339-validator",
    "rfc3986-validator>=0.1.1",
]
dynamic = [
    "version",
]

[project.license]
file = 'COPYING.md'

[project.urls]
Homepage = "http://jupyter.org"

[project.scripts]
jupyter-events = "jupyter_events.cli:main"

[project.optional-dependencies]
docs = [
    "jupyterlite-sphinx",
    "myst_parser",
    "pydata_sphinx_theme",
    "sphinxcontrib-spelling",
]
test = [
    "coverage",
    "pre-commit",
    "pytest-asyncio>=0.19.0",
    "pytest-console-scripts",
    "pytest-cov",
    "pytest>=7.0",
    # [cli]
    "click",
    "rich",
]
cli = [
    "click",
    "rich"
]

[tool.hatch.version]
path = "jupyter_events/_version.py"

[tool.hatch.envs.docs]
features = ["docs"]
[tool.hatch.envs.docs.scripts]
build = "make -C docs html SPHINXOPTS='-W'"

[tool.hatch.envs.test]
features = ["test"]
[tool.hatch.envs.test.scripts]
test = "python -m pytest -vv {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.cov]
features = ["test"]
dependencies = ["coverage", "pytest-cov"]
[tool.hatch.envs.cov.scripts]
test = "python -m pytest -vv --cov jupyter_events --cov-branch --cov-report term-missing:skip-covered --cov-fail-under 80 {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.typing]
features = ["test"]
dependencies = ["mypy>=0.990"]
[tool.hatch.envs.typing.scripts]
test = "mypy --install-types --non-interactive {args:.}"

[tool.hatch.envs.lint]
dependencies = ["black[jupyter]==22.12.0", "mdformat>0.7", "ruff==0.0.194"]
detached = true
[tool.hatch.envs.lint.scripts]
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
  "mdformat --check {args:docs *.md}"
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "mdformat {args:docs *.md}"
]

[tool.pytest.ini_options]
addopts = "-raXs --durations 10 --color=yes --doctest-modules"
testpaths = [
    "tests/"
]
asyncio_mode = "auto"
script_launch_mode = "subprocess"

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\bProtocol\\):",
"@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 100
skip-string-normalization = true
target-version = ["py37"]

[tool.ruff]
target-version = "py37"
line-length = 100
select = [
  "A", "B", "C", "E", "EM", "F", "FBT", "I", "N", "Q", "RUF", "S", "T",
  "UP", "W", "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Ignore McCabe complexity
  "C901",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Use of `assert` detected
  "S101",
  # Line too long
  "E501",
  # Relative imports are banned
  "TID252",
  # Boolean ... in function definition
  "FBT001", "FBT002",
  # Module level import not at top of file
  "E402",
  # A001/A002/A003 .. is shadowing a python builtin
  "A001", "A002", "A003",
  # Possible hardcoded password
  "S105", "S106",
  # Q000 Single quotes found but double quotes preferred
  "Q000",
  # N806 Variable `B` in function should be lowercase
  "N806",
  # T201 `print` found
  "T201",
  # N802 Function name `CreateWellKnownSid` should be lowercase
  "N802", "N803",
  # C408 Unnecessary `dict` call (rewrite as a literal)
  "C408",
  # N801 Class name `directional_link` should use CapWords convention
  "N801",
]
unfixable = [
  # Don't touch print statements
  "T201",
  # Don't touch noqa lines
  "RUF100",
]

[tool.ruff.per-file-ignores]
# B011 Do not call assert False since python -O removes these calls
# F841 local variable 'foo' is assigned to but never used
# C408 Unnecessary `dict` call
# E402 Module level import not at top of file
# T201 `print` found
# B007 Loop control variable `i` not used within the loop body.
# N802 Function name `assertIn` should be lowercase
# F841 Local variable `t` is assigned to but never used
"tests/*" = ["B011", "F841", "C408", "E402", "T201", "B007", "N802", "F841"]

[tool.interrogate]
ignore-init-module=true
ignore-private=true
ignore-semiprivate=true
ignore-property-decorators=true
ignore-nested-functions=true
ignore-nested-classes=true
fail-under=100
exclude = ["docs", "tests"]
